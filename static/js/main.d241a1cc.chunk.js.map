{"version":3,"sources":["App.js","serviceWorker.js","components/squareComponent.jsx","logic/logic.js","components/boardComponent.jsx","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","Square","state","content","_this","props","styles","border","width","height","textAlign","_this2","this","react_default","a","createElement","onClick","id","style","possibleWinPlays","checkWin","actualState","winner","index","length","result","checkSingleRowForWin","slots","slotContent0","slotContent1","slotContent2","checkIfAllSlotsAreSet","allSet","Board","turn","full","info","handleClick","setState","play","restartGame","renderTurnOrWinner","renderInfo","squareComponent","key","ReactDOM","render","boardComponent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d241a1cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nclass Square extends Component {\r\n  state = {\r\n    content: this.props.content\r\n  };\r\n  styles = {\r\n    border: \"1px solid\",\r\n    width: \"100px\",\r\n    height: \"100px\",\r\n    textAlign: \"center\"\r\n  };\r\n  render() {\r\n    return (\r\n      <td onClick={() => this.props.onClick(this.props.id)} style={this.styles}>\r\n        {this.props.content}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","const possibleWinPlays = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6]\r\n];\r\n\r\nexport default function play(actualState, id) {\r\n  actualState.info = \"\";\r\n  if (checkWin(actualState) === \"\") {\r\n    //No existe ganador\r\n    if (!checkIfAllSlotsAreSet(actualState.slots)) {\r\n      //No todas las celdas están llenas\r\n      if (actualState.slots[id].content === \"\") {\r\n        //Celda vacía\r\n        actualState.slots[id].content = actualState.turn;\r\n        actualState.turn = actualState.turn === \"x\" ? \"o\" : \"x\";\r\n        let winner = checkWin(actualState);\r\n        if (winner !== \"\") {\r\n          //existe un nuevo ganador\r\n          actualState.winner = winner;\r\n        } else if (winner === \"\" && checkIfAllSlotsAreSet(actualState.slots)) {\r\n          actualState.full = true;\r\n          actualState.info =\r\n            \"Todas las celdas están ocupadas. Inicie un nuevo juego.\";\r\n        }\r\n      } else {\r\n        //Celda ya tiene valor;\r\n        actualState.info = \"Esa celda está ocupada.\";\r\n      }\r\n    } else {\r\n      actualState.info =\r\n        \"Todas las celdas están ocupadas. Inicie un nuevo juego.\";\r\n    }\r\n  } else {\r\n    //Ya existe un ganador\r\n    actualState.info = \"Ya existe un ganador. Inicie nuevamente el juego.\";\r\n  }\r\n  return actualState;\r\n}\r\n\r\nfunction checkWin(actualState) {\r\n  let winner = \"\";\r\n  for (let index = 0; index < possibleWinPlays.length; index++) {\r\n    let result = checkSingleRowForWin(\r\n      actualState.slots[possibleWinPlays[index][0]].content,\r\n      actualState.slots[possibleWinPlays[index][1]].content,\r\n      actualState.slots[possibleWinPlays[index][2]].content\r\n    );\r\n    if (result === \"x\") {\r\n      winner = result;\r\n      break;\r\n    } else if (result === \"o\") {\r\n      winner = result;\r\n      break;\r\n    }\r\n  }\r\n  return winner;\r\n}\r\n\r\nfunction checkSingleRowForWin(slotContent0, slotContent1, slotContent2) {\r\n  let winner = \"\";\r\n  if (slotContent0 !== \"\" && slotContent1 !== \"\" && slotContent2 !== \"\") {\r\n    if (slotContent0 === \"x\" && slotContent1 === \"x\" && slotContent2 === \"x\") {\r\n      winner = \"x\";\r\n    } else if (\r\n      slotContent0 === \"o\" &&\r\n      slotContent1 === \"o\" &&\r\n      slotContent2 === \"o\"\r\n    ) {\r\n      winner = \"o\";\r\n    }\r\n  }\r\n  return winner;\r\n}\r\n\r\nfunction checkIfAllSlotsAreSet(slots) {\r\n  let allSet = true;\r\n  for (let index = 0; index < slots.length; index++) {\r\n    if (slots[index].content === \"\") {\r\n      allSet = false;\r\n      break;\r\n    }\r\n  }\r\n  return allSet;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./squareComponent\";\r\nimport play from \"../logic/logic.js\";\r\nclass Board extends Component {\r\n  state = {\r\n    slots: [\r\n      { id: 0, content: \"\" },\r\n      { id: 1, content: \"\" },\r\n      { id: 2, content: \"\" },\r\n      { id: 3, content: \"\" },\r\n      { id: 4, content: \"\" },\r\n      { id: 5, content: \"\" },\r\n      { id: 6, content: \"\" },\r\n      { id: 7, content: \"\" },\r\n      { id: 8, content: \"\" }\r\n    ],\r\n    turn: \"x\",\r\n    full: false,\r\n    winner: \"\",\r\n    info: \"\"\r\n  };\r\n\r\n  styles = {\r\n    width: \"300px\",\r\n    height: \"300px\",\r\n    border: \"1px solid\"\r\n  };\r\n  handleClick = id => {\r\n    this.setState(play(this.state, id));\r\n  };\r\n\r\n  restartGame = () => {\r\n    let initialState = {\r\n      slots: [\r\n        { id: 0, content: \"\" },\r\n        { id: 1, content: \"\" },\r\n        { id: 2, content: \"\" },\r\n        { id: 3, content: \"\" },\r\n        { id: 4, content: \"\" },\r\n        { id: 5, content: \"\" },\r\n        { id: 6, content: \"\" },\r\n        { id: 7, content: \"\" },\r\n        { id: 8, content: \"\" }\r\n      ],\r\n      turn: \"x\",\r\n      full: false,\r\n      winner: \"\",\r\n      info: \"\"\r\n    };\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>¡Bienvenido a un nuevo juego de Gato!</h1>\r\n        {this.renderTurnOrWinner()}\r\n        {this.renderInfo()}\r\n        <table style={this.styles}>\r\n          <tbody>\r\n            <tr>\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[0].id}\r\n                content={this.state.slots[0].content}\r\n                key={this.state.slots[0].id}\r\n              />\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[1].id}\r\n                content={this.state.slots[1].content}\r\n                key={this.state.slots[1].id}\r\n              />\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[2].id}\r\n                content={this.state.slots[2].content}\r\n                key={this.state.slots[2].id}\r\n              />\r\n            </tr>\r\n            <tr>\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[3].id}\r\n                content={this.state.slots[3].content}\r\n                key={this.state.slots[3].id}\r\n              />\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[4].id}\r\n                content={this.state.slots[4].content}\r\n                key={this.state.slots[4].id}\r\n              />\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[5].id}\r\n                content={this.state.slots[5].content}\r\n                key={this.state.slots[5].id}\r\n              />\r\n            </tr>\r\n            <tr>\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[6].id}\r\n                content={this.state.slots[6].content}\r\n                key={this.state.slots[6].id}\r\n              />\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[7].id}\r\n                content={this.state.slots[7].content}\r\n                key={this.state.slots[7].id}\r\n              />\r\n              <Square\r\n                onClick={this.handleClick}\r\n                id={this.state.slots[8].id}\r\n                content={this.state.slots[8].content}\r\n                key={this.state.slots[8].id}\r\n              />\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <br />\r\n        <br />\r\n        <button onClick={() => this.restartGame()}>Volver a jugar</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderTurnOrWinner() {\r\n    if (this.state.winner === \"\" && this.state.full) {\r\n      return <h4>Tablero lleno.</h4>;\r\n    } else if (this.state.winner === \"\") {\r\n      return <h4>Es el turno de '{this.state.turn}'</h4>;\r\n    } else if (this.state.winner !== \"\") {\r\n      return <h2>Ha ganado '{this.state.winner}'</h2>;\r\n    }\r\n  }\r\n  renderInfo() {\r\n    if (this.state.info !== \"\") {\r\n      return <p>Información: {this.state.info}</p>;\r\n    } else {\r\n      return <br />;\r\n    }\r\n  }\r\n}\r\nexport default Board;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Board from \"./components/boardComponent\";\nReactDOM.render(<Board />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}